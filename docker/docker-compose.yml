version: '3.8'


name: mf-ai-cluster

networks:
  ai_cluster_net:
    driver: bridge

services:
  api:
    build:
      context: ./ # 指定 Dockerfile 的目录
      dockerfile: Dockerfile # 可选，明确指定 Dockerfile 名称，如果使用默认名称可省略
    image: mf-ai:last
    container_name: mf_ai_api
    ports:
      - "11080:8000" # 将容器的 8000 端口映射到主机的 8000 端口
    volumes:
      - ../api:/app # 将本地的 app 目录挂载到容器的 /app 目录
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 90s
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload # 启动命令
  
  open-webui:
    image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/ghcr.io/open-webui/open-webui:main
    container_name: mf_ai_open_webui
    networks:
      - ai_cluster_net
    ports:
      - 11081:8080
    restart: always
    volumes:
      - ../data/open-webui:/app/backend/data
  
  milvus-standalone: #向量数据库
    image: milvusdb/milvus:v2.4.13-hotfix
    container_name: mf_ai_milvus_standalone
    security_opt:
      - seccomp:unconfined
    environment:
      - ETCD_USE_EMBED=true
      - ETCD_DATA_DIR=/var/lib/milvus/etcd
      - ETCD_CONFIG_PATH=/milvus/configs/embedEtcd.yaml
      - COMMON_STORAGETYPE=local
    volumes:
      - ../data/milvusDB/milvus:/var/lib/milvus
      - ../docker/milvusDB/embedEtcd.yaml:/milvus/configs/embedEtcd.yaml
      - ../docker/milvusDB/user.yaml:/milvus/configs/user.yaml
    networks:
      - ai_cluster_net
    ports:
      - "11083:19530"
      - "9091:9091"
      - "2379:2379"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 90s
    command: ["milvus", "run", "standalone"]
